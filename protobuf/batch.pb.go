// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: protobuf/batch.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompressionMethod int32

const (
	CompressionMethod_NONE   CompressionMethod = 0
	CompressionMethod_LZ4    CompressionMethod = 1
	CompressionMethod_SNAPPY CompressionMethod = 2
)

// Enum value maps for CompressionMethod.
var (
	CompressionMethod_name = map[int32]string{
		0: "NONE",
		1: "LZ4",
		2: "SNAPPY",
	}
	CompressionMethod_value = map[string]int32{
		"NONE":   0,
		"LZ4":    1,
		"SNAPPY": 2,
	}
)

func (x CompressionMethod) Enum() *CompressionMethod {
	p := new(CompressionMethod)
	*p = x
	return p
}

func (x CompressionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_batch_proto_enumTypes[0].Descriptor()
}

func (CompressionMethod) Type() protoreflect.EnumType {
	return &file_protobuf_batch_proto_enumTypes[0]
}

func (x CompressionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionMethod.Descriptor instead.
func (CompressionMethod) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_batch_proto_rawDescGZIP(), []int{0}
}

type Batch struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Timestamp         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Compression       CompressionMethod      `protobuf:"varint,2,opt,name=compression,proto3,enum=logwarp_common.CompressionMethod" json:"compression,omitempty"`
	InputPlugin       string                 `protobuf:"bytes,3,opt,name=inputPlugin,proto3" json:"inputPlugin,omitempty"`
	QueuePlugin       string                 `protobuf:"bytes,4,opt,name=queuePlugin,proto3" json:"queuePlugin,omitempty"`
	SubmitterHostname string                 `protobuf:"bytes,5,opt,name=submitterHostname,proto3" json:"submitterHostname,omitempty"`
	Records           []byte                 `protobuf:"bytes,6,opt,name=records,proto3" json:"records,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Batch) Reset() {
	*x = Batch{}
	mi := &file_protobuf_batch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_batch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_protobuf_batch_proto_rawDescGZIP(), []int{0}
}

func (x *Batch) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Batch) GetCompression() CompressionMethod {
	if x != nil {
		return x.Compression
	}
	return CompressionMethod_NONE
}

func (x *Batch) GetInputPlugin() string {
	if x != nil {
		return x.InputPlugin
	}
	return ""
}

func (x *Batch) GetQueuePlugin() string {
	if x != nil {
		return x.QueuePlugin
	}
	return ""
}

func (x *Batch) GetSubmitterHostname() string {
	if x != nil {
		return x.SubmitterHostname
	}
	return ""
}

func (x *Batch) GetRecords() []byte {
	if x != nil {
		return x.Records
	}
	return nil
}

var File_protobuf_batch_proto protoreflect.FileDescriptor

const file_protobuf_batch_proto_rawDesc = "" +
	"\n" +
	"\x14protobuf/batch.proto\x12\x0elogwarp_common\x1a\x1fgoogle/protobuf/timestamp.proto\"\x92\x02\n" +
	"\x05Batch\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12C\n" +
	"\vcompression\x18\x02 \x01(\x0e2!.logwarp_common.CompressionMethodR\vcompression\x12 \n" +
	"\vinputPlugin\x18\x03 \x01(\tR\vinputPlugin\x12 \n" +
	"\vqueuePlugin\x18\x04 \x01(\tR\vqueuePlugin\x12,\n" +
	"\x11submitterHostname\x18\x05 \x01(\tR\x11submitterHostname\x12\x18\n" +
	"\arecords\x18\x06 \x01(\fR\arecords*2\n" +
	"\x11CompressionMethod\x12\b\n" +
	"\x04NONE\x10\x00\x12\a\n" +
	"\x03LZ4\x10\x01\x12\n" +
	"\n" +
	"\x06SNAPPY\x10\x02B\fZ\n" +
	"./protobufb\x06proto3"

var (
	file_protobuf_batch_proto_rawDescOnce sync.Once
	file_protobuf_batch_proto_rawDescData []byte
)

func file_protobuf_batch_proto_rawDescGZIP() []byte {
	file_protobuf_batch_proto_rawDescOnce.Do(func() {
		file_protobuf_batch_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protobuf_batch_proto_rawDesc), len(file_protobuf_batch_proto_rawDesc)))
	})
	return file_protobuf_batch_proto_rawDescData
}

var file_protobuf_batch_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protobuf_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_protobuf_batch_proto_goTypes = []any{
	(CompressionMethod)(0),        // 0: logwarp_common.CompressionMethod
	(*Batch)(nil),                 // 1: logwarp_common.Batch
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_protobuf_batch_proto_depIdxs = []int32{
	2, // 0: logwarp_common.Batch.timestamp:type_name -> google.protobuf.Timestamp
	0, // 1: logwarp_common.Batch.compression:type_name -> logwarp_common.CompressionMethod
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_protobuf_batch_proto_init() }
func file_protobuf_batch_proto_init() {
	if File_protobuf_batch_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protobuf_batch_proto_rawDesc), len(file_protobuf_batch_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_batch_proto_goTypes,
		DependencyIndexes: file_protobuf_batch_proto_depIdxs,
		EnumInfos:         file_protobuf_batch_proto_enumTypes,
		MessageInfos:      file_protobuf_batch_proto_msgTypes,
	}.Build()
	File_protobuf_batch_proto = out.File
	file_protobuf_batch_proto_goTypes = nil
	file_protobuf_batch_proto_depIdxs = nil
}
